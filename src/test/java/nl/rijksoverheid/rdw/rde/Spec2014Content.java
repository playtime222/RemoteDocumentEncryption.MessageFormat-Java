package nl.rijksoverheid.rdw.rde;

import nl.rijksoverheid.rdw.rde.crypto.CryptoKeyConverter;
import org.bouncycastle.util.encoders.Hex;

import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.interfaces.ECPublicKey;
import java.security.spec.*;

public class Spec2014Content {

    //ChipAuthenticationInfo [protocol: id-CA-ECDH-AES-CBC-CMAC-256, version: 1, keyId: -]
    //ChipAuthenticationPublicKeyInfo [protocol: id-PK-ECDH, chipAuthenticationPublicKey: EC [brainpoolP320r1], keyId: -]
    //All bytes
    public static String DG14Hex
    public static String DG14_PubKey_Alg = "EC";


    /** File identifier for data group 2. Data group 2 contains face image data. */
    //First 500 bytes
    public static String

    /** The security document. */
    //public static final String SOD = "";

    /** The data group presence list. */
    //public static final String COM = "";

    public static String DG14_PubKey = "308201753082011d06072a8648ce3d020130820110020101303406072a8648ce3d0101022900d35e472036bc4fb7e13c785ed201e065f98fcfa6f6f40def4f92b9ec7893ec28fcd412b1f1b32e27305404283ee30b568fbab0f883ccebd46d3f3bb8a2a73513f5eb79da66190eb085ffa9f492f375a97d860eb40428520883949dfdbc42d3ad198640688a6fe13f41349554b49acc31dccd884539816f5eb4ac8fb1f1a604510443bd7e9afb53d8b85289bcc48ee5bfe6f20137d10a087eb6e7871e2a10a599c710af8d0d39e2061114fdd05545ec1cc8ab4093247f77275e0743ffed117182eaa9c77877aaac6ac7d35245d1692e8ee1022900d35e472036bc4fb7e13c785ed201e065f98fcfa5b68f12a32d482ec7ee8658e98691555b44c5931102010103520004710da6dab5b770920d3d4d6807b02a13059befb4926e2d00cfde4b4471571473a582934bbe92059800663578c83419e3563fe3e8af3ae58b521d3741693c9ce19b312392cb00f59af086863186706396";
    public static String DG14_CA_ProtocolOID = "0.4.0.127.0.7.2.2.3.2.4";
    public static String DG14_PubKey_OID = "0.4.0.127.0.7.2.2.1.2";
    //public static String DG14_PubKey_ID = "id-PK-ECDH";

    public static PublicKey getPublicKey() throws NoSuchAlgorithmException, InvalidKeySpecException, CertificateException, NoSuchProviderException {
        return CryptoKeyConverter.decodeAsn1DerX509ToPublicKey("EC", Hex.decode(DG14_PubKey));
        //return KeyFactory.getInstance("EC", new BouncyCastleProvider()).generatePublic(new X509EncodedKeySpec(Hex.decode(DG14_PubKey)));
    }

    public static AlgorithmParameterSpec getAlgorithmParameterSpec() throws NoSuchAlgorithmException, InvalidKeySpecException, CertificateException, NoSuchProviderException {
        final PublicKey piccPublicKey = getPublicKey();

//        if (DG14_PubKey_Alg.equals(agreementAlg) && piccPublicKey instanceof DHPublicKey)
//            return ((DHPublicKey)piccPublicKey).getParams();

//        if (ECDH.equals(agreementAlg) && piccPublicKey instanceof ECPublicKey)
            return ((ECPublicKey)piccPublicKey).getParams();

//        throw new IllegalStateException("Cannot get parameters.");
    }}


